<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Neuron.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Neuron.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri May 22 13:45:11 2015
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UART0_IRQHandler &rArr; Uart0_Handle &rArr; uart_printf &rArr; __c89vsprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[19]">Default_Handler</a> from startup_m051series.o(.text) referenced 11 times from startup_m051series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[a]">GPIOP0P1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[b]">GPIOP2P3P4_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[18]">I2C_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[d]">PWMB_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1a]">PWRWU_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_m051series.o(i.SystemInit) referenced from startup_m051series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from adc.o(i.TMR0_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from adc.o(i.UART0_IRQHandler) referenced from startup_m051series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_m051series.o(.text) referenced from startup_m051series.o(RESET)
 <LI><a href="#[1e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m051series.o(.text)
 <LI><a href="#[1f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[1c]">main</a> from adc.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[64]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[65]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[66]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[67]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_m051series.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOP0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOP2P3P4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[31]"></a>CLK_EnablePLL</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[3b]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[37]"></a>CLK_SetCoreClock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[38]"></a>CLK_SetHCLK</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[3d]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[32]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[3e]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[5b]"></a>Pin2Addr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mygpio.o(i.Pin2Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Pin2Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
</UL>

<P><STRONG><a name="[3a]"></a>SYS_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, adc.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[39]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_m051series.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_m051series.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[41]"></a>TIMER_Open</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TMR0_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, adc.o(i.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TMR0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = UART0_IRQHandler &rArr; Uart0_Handle &rArr; uart_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART0_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_printf.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART0_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>UART1_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_printf.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART1_Init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>UART_Function_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(i.UART_Function_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Function_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>UART_Open</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[4a]"></a>UART_SetLine_Config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart.o(i.UART_SetLine_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Uart0_Handle</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, adc.o(i.Uart0_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Uart0_Handle &rArr; uart_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[70]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[71]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[60]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[72]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[30]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[58]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mygpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[74]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[53]"></a>delayMicroseconds</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, systime.o(i.delayMicroseconds))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_reset
</UL>

<P><STRONG><a name="[5e]"></a>h_dat0</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, mergbled.o(i.h_dat0))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
</UL>

<P><STRONG><a name="[5d]"></a>h_dat1</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, mergbled.o(i.h_dat1))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
</UL>

<P><STRONG><a name="[52]"></a>led_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mergbled.o(i.led_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_show
</UL>

<P><STRONG><a name="[1c]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, adc.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; uart_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColorAll
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_show
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[57]"></a>pinMode</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mygpio.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pinMode &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
</UL>

<P><STRONG><a name="[59]"></a>rgb_clear</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mergbled.o(i.rgb_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rgb_clear &rArr; rgb_show &rArr; led_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_show
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
</UL>

<P><STRONG><a name="[54]"></a>rgb_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mergbled.o(i.rgb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rgb_init &rArr; pinMode &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin2Addr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNumber
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>rgb_show</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mergbled.o(i.rgb_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rgb_show &rArr; led_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_clear
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>send_byte</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, mergbled.o(i.send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_dat1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_dat0
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_show
</UL>

<P><STRONG><a name="[61]"></a>send_string</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart_printf.o(i.send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[55]"></a>setColorAll</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, mergbled.o(i.setColorAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = setColorAll &rArr; setColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>setColorIndex</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mergbled.o(i.setColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColorAll
</UL>

<P><STRONG><a name="[5a]"></a>setNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mergbled.o(i.setNumber))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_init
</UL>

<P><STRONG><a name="[4b]"></a>uart_printf</STRONG> (Thumb, 44 bytes, Stack size 288 bytes, uart_printf.o(i.uart_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = uart_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Handle
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m051series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m051series.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, system_m051series.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[43]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Function_Init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>

<P><STRONG><a name="[36]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
</UL>

<P><STRONG><a name="[33]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[4e]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[51]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
